{"version":3,"file":"app.07de05d54f24dc442b2a.js","mappings":"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","sources":["webpack://battleship/./src/app/components/factories/ship.js","webpack://battleship/./src/app/components/helpers/helper.js","webpack://battleship/./src/app/components/factories/player.js","webpack://battleship/./src/app/components/factories/gameboard.js","webpack://battleship/./src/app/components/factories/game.js","webpack://battleship/./src/app/index.js"],"sourcesContent":["const Ship = (shipLength, shipName) => {\r\n  const name = shipName || `Ship ${shipLength}`;\r\n  const length = shipLength;\r\n  const positions = new Array(length).fill(false);\r\n\r\n  const hit = (position) => {\r\n    if (position < 0 || position > length - 1) throw new Error(\"Invalid Position Hit\");\r\n    positions[position] = true;\r\n  };\r\n\r\n  const hits = () => {\r\n    return [...positions];\r\n  };\r\n\r\n  const isSunk = () => {\r\n    return positions.every((position) => position);\r\n  };\r\n\r\n  return { name, length, hit, hits, isSunk };\r\n};\r\n\r\nexport default Ship;\r\n","import Ship from \"../factories/ship\";\r\n\r\nconst copyArray = (arr) => JSON.parse(JSON.stringify(arr));\r\n\r\nconst getDefaultShips = () => {\r\n  return [\r\n    {\r\n      ship: Ship(5, \"Carrier\"),\r\n      vertical: false,\r\n      location: null,\r\n    },\r\n    {\r\n      ship: Ship(4, \"BattleShip\"),\r\n      vertical: false,\r\n      location: null,\r\n    },\r\n    {\r\n      ship: Ship(3, \"Destroyer\"),\r\n      vertical: false,\r\n      location: null,\r\n    },\r\n    {\r\n      ship: Ship(3, \"Submarine\"),\r\n      vertical: false,\r\n      location: null,\r\n    },\r\n    {\r\n      ship: Ship(2, \"Patrol Boat\"),\r\n      vertical: false,\r\n      location: null,\r\n    },\r\n  ];\r\n};\r\n\r\nconst isValidCoord = (coords) => {\r\n  const has = Object.prototype.hasOwnProperty;\r\n  if (!has.call(coords, \"x\") || !has.call(coords, \"y\")) return false;\r\n\r\n  const { x, y } = coords;\r\n  if (typeof x !== \"number\" || typeof y !== \"number\") return false;\r\n\r\n  if (x < 0 || x > 9 || y < 0 || y > 9) return false;\r\n\r\n  return true;\r\n};\r\n\r\nconst isValidState = (state) => {\r\n  const has = Object.prototype.hasOwnProperty;\r\n  if (!has.call(state, \"vertical\") || !has.call(state, \"location\")) return false;\r\n  if (state.vertical !== true && state.vertical !== false) return false;\r\n  if (!isValidCoord(state.location)) return false;\r\n\r\n  return true;\r\n};\r\n\r\nconst getRandomCoords = () => {\r\n  return {\r\n    x: Math.floor(Math.random() * 10),\r\n    y: Math.floor(Math.random() * 10),\r\n  };\r\n};\r\n\r\nconst getRandomNewState = () => {\r\n  const vertical = Math.floor(Math.random() * 100) < 50 ? true : false;\r\n\r\n  return {\r\n    vertical,\r\n    location: getRandomCoords(),\r\n  };\r\n};\r\n\r\nexport {\r\n  copyArray,\r\n  getDefaultShips,\r\n  isValidCoord,\r\n  isValidState,\r\n  getRandomCoords,\r\n  getRandomNewState,\r\n};\r\n","import { getRandomCoords } from \"../helpers/helper\";\r\n\r\nconst Player = (name) => {\r\n  const attackBoard = (coords, enemyBoard) => {\r\n    return {\r\n      location: coords,\r\n      result: enemyBoard.recieveAttack(coords),\r\n    };\r\n  };\r\n\r\n  const autoAttackBoard = (enemyBoard) => {\r\n    let result = false;\r\n    let coords;\r\n    do {\r\n      coords = getRandomCoords();\r\n      result = enemyBoard.recieveAttack(coords);\r\n    } while (!result);\r\n\r\n    return {\r\n      location: coords,\r\n      result,\r\n    };\r\n  };\r\n\r\n  return { name, attackBoard, autoAttackBoard };\r\n};\r\n\r\nexport default Player;\r\n","import Ship from \"./ship\";\r\nimport { copyArray, isValidState } from \"../helpers/helper\";\r\n\r\nconst Gameboard = () => {\r\n  let board = copyArray(new Array(10).fill(new Array(10).fill(\"\")));\r\n  const ships = [];\r\n\r\n  const currBoardState = () => {\r\n    return copyArray(board);\r\n  };\r\n\r\n  const placeShipAt = (shipInfo, newState) => {\r\n    if (!isValidState(newState)) return false;\r\n\r\n    if (isValidPosition(shipInfo, newState)) {\r\n      const length = shipInfo.ship.length;\r\n      const {\r\n        vertical,\r\n        location: { x, y },\r\n      } = newState;\r\n\r\n      // Remove Prev Ship Location & update the current board\r\n      let { newBoardState } = removeShipOnBoard(shipInfo);\r\n      board = newBoardState;\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        if (vertical) board[x + i][y] = \"O\";\r\n        else board[x][y + i] = \"O\";\r\n      }\r\n\r\n      // Update the ship object properties directly\r\n      shipInfo.vertical = newState.vertical;\r\n      shipInfo.location = newState.location;\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const removeShipOnBoard = (shipInfo) => {\r\n    const {\r\n      vertical,\r\n      ship: { length },\r\n      location,\r\n    } = shipInfo;\r\n    const boardCopy = currBoardState();\r\n\r\n    // If the ship isn't on the board\r\n    if (!location) return { newBoardState: boardCopy, newShipObjState: shipInfo };\r\n\r\n    const { x, y } = location;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (vertical) boardCopy[x + i][y] = \"\";\r\n      else boardCopy[x][y + i] = \"\";\r\n    }\r\n\r\n    return {\r\n      newBoardState: boardCopy,\r\n      newShipObjState: {\r\n        ...shipInfo,\r\n        location: null,\r\n      },\r\n    };\r\n  };\r\n\r\n  const isValidPosition = (shipInfo, state) => {\r\n    if (!isValidState(state)) return false;\r\n\r\n    const length = shipInfo.ship.length;\r\n    const {\r\n      vertical,\r\n      location: { x, y },\r\n    } = state;\r\n\r\n    // If the ship would go off the board in this new state\r\n    if ((vertical && x + length > 10) || (!vertical && y + length > 10)) return false;\r\n\r\n    // Simulate removing the ship on the board if it was previous on the board\r\n    let { newBoardState } = removeShipOnBoard(shipInfo);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      // If there exists an part of the ship in the path\r\n      if (vertical && newBoardState[x + i][y]) return false;\r\n      if (newBoardState[x][y + i]) return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const recieveAttack = (coordinates) => {\r\n    const { x, y } = coordinates;\r\n\r\n    // Spot already hit\r\n    if (board[x][y] === \"*\" || board[x][y] === \"X\") return false;\r\n\r\n    // No part of ship located at the coordinate\r\n    if (board[x][y] === \"\") {\r\n      board[x][y] = \"*\";\r\n      return \"Miss\";\r\n    }\r\n\r\n    board[x][y] = \"X\";\r\n\r\n    // Find the ship that was hit\r\n    const hitShip = ships.find((shipInfo) => {\r\n      const {\r\n        ship: { length },\r\n        vertical,\r\n        location: { x: startX, y: startY },\r\n      } = shipInfo;\r\n\r\n      if (vertical) return startX <= x && x < startX + length && startY === y;\r\n      else return startX === x && startY <= y && y < startY + length;\r\n    });\r\n\r\n    if (hitShip.vertical) hitShip.ship.hit(x - hitShip.location.x);\r\n    else hitShip.ship.hit(y - hitShip.location.y);\r\n\r\n    return \"Hit\";\r\n  };\r\n\r\n  const gameOver = () => {\r\n    return ships.every((shipInfo) => shipInfo.ship.isSunk());\r\n  };\r\n\r\n  const addShipInfo = (shipInfo) => {\r\n    if (\r\n      !shipInfo.ship instanceof Ship ||\r\n      (shipInfo.vertical !== true && shipInfo.vertical !== false)\r\n    ) {\r\n      return false;\r\n    }\r\n    shipInfo.location = null;\r\n    ships.push(shipInfo);\r\n\r\n    return true;\r\n  };\r\n\r\n  return {\r\n    currBoardState,\r\n    placeShipAt,\r\n    recieveAttack,\r\n    gameOver,\r\n    addShipInfo,\r\n  };\r\n};\r\n\r\nexport default Gameboard;\r\n","import Player from \"./player\";\r\nimport Gameboard from \"./gameboard\";\r\nimport { getDefaultShips, getRandomNewState } from \"../helpers/helper\";\r\n\r\nconst playerBoardDiv = document.getElementById(\"player-board-div\");\r\nconst computerBoardDiv = document.getElementById(\"computer-board-div\");\r\nconst instructionDiv = document.getElementById(\"instructions\");\r\nconst rotateBtn = document.getElementById(\"rotate\");\r\nconst winnerLine = document.getElementById(\"winner\");\r\nconst modal = document.getElementById(\"reset-modal\");\r\n\r\nconst initializeGame = () => {\r\n  reset();\r\n  playerBoardDiv.textContent = \"\";\r\n  playerBoardDiv.classList.remove(\"lock-board\");\r\n  computerBoardDiv.textContent = \"\";\r\n\r\n  const Computer = Player(\"Computer\");\r\n  const ComputerGameBoard = createRandomBoard();\r\n  const ComputerDOMBoard = createDOMBoard(ComputerGameBoard.currBoardState());\r\n  ComputerDOMBoard.classList.add(\"computer\");\r\n  ComputerDOMBoard.classList.add(\"hidden\");\r\n  computerBoardDiv.appendChild(ComputerDOMBoard);\r\n\r\n  const Player1 = Player(\"Player\");\r\n  const PlayerGameBoard = Gameboard();\r\n  const PlayerDOMBoard = createDOMBoard(PlayerGameBoard.currBoardState());\r\n  playerBoardDiv.appendChild(PlayerDOMBoard);\r\n\r\n  createPlayerBoard({\r\n    player: Player1,\r\n    playerBoard: PlayerGameBoard,\r\n    playerDOMBoard: PlayerDOMBoard,\r\n\r\n    computer: Computer,\r\n    computerBoard: ComputerGameBoard,\r\n    ComputerDOMBoard: ComputerDOMBoard,\r\n  });\r\n};\r\n\r\nconst createPlayerBoard = (game) => {\r\n  const { playerBoard, playerDOMBoard, ComputerDOMBoard } = game;\r\n  const playerBoardSquares = playerDOMBoard.querySelectorAll(\".square\");\r\n\r\n  const ships = getDefaultShips();\r\n  let isVertical = false;\r\n\r\n  const rotateShip = () => {\r\n    isVertical = !isVertical;\r\n    isVertical ? (rotateBtn.textContent = \"Rotate X\") : (rotateBtn.textContent = \"Rotate Y\");\r\n  };\r\n\r\n  ships.forEach((ship) => playerBoard.addShipInfo(ship));\r\n  rotateBtn.addEventListener(\"click\", rotateShip);\r\n  rotateBtn.classList.remove(\"hidden\");\r\n\r\n  const playerAddShips = () => {\r\n    if (ships.length === 0) {\r\n      instructionDiv.textContent = \"\";\r\n      playerBoardDiv.classList.add(\"lock-board\");\r\n      ComputerDOMBoard.classList.remove(\"hidden\");\r\n      rotateBtn.classList.add(\"hidden\");\r\n      rotateBtn.removeEventListener(\"click\", rotateShip);\r\n\r\n      console.log(\"finished adding ships\");\r\n      playGame(game);\r\n\r\n      return;\r\n    } else {\r\n      const ship = ships[0];\r\n      const shipName = ship.ship.name;\r\n      const shipLength = ship.ship.length;\r\n      instructionDiv.textContent = `Place your ${shipName}`;\r\n\r\n      const addShip = (e) => {\r\n        let {\r\n          classList: sqrInfo,\r\n          dataset: { x, y },\r\n        } = e.target;\r\n\r\n        if (sqrInfo.contains(\"square\")) {\r\n          x = parseInt(x);\r\n          y = parseInt(y);\r\n          const state = {\r\n            location: { x, y },\r\n            vertical: isVertical,\r\n          };\r\n\r\n          if (playerBoard.placeShipAt(ship, state)) {\r\n            /* display ship placement*/\r\n            for (let i = 0; i < shipLength; i++) {\r\n              const square = playerBoardDiv.querySelector(\r\n                `.square[data-x=\"${isVertical ? x + i : x}\"][data-y=\"${isVertical ? y : y + i}\"]`\r\n              );\r\n              square.classList.add(\"ship\");\r\n            }\r\n\r\n            ships.shift();\r\n          }\r\n        }\r\n        playerBoardDiv.removeEventListener(\"mouseover\", layoutHover);\r\n        playerBoardDiv.removeEventListener(\"click\", addShip);\r\n        playerAddShips();\r\n      };\r\n\r\n      const layoutHover = (e) => {\r\n        const x = parseInt(e.target.dataset.x);\r\n        const y = parseInt(e.target.dataset.y);\r\n        playerBoardSquares.forEach((square) => square.classList.remove(\"spot\"));\r\n\r\n        for (let i = 0; i < shipLength; i++) {\r\n          if ((!x && x !== 0) || (x + i > 9 && isVertical) || (y + i > 9 && !isVertical)) continue;\r\n          const square = playerBoardDiv.querySelector(\r\n            `.square[data-x=\"${isVertical ? x + i : x}\"][data-y=\"${isVertical ? y : y + i}\"]`\r\n          );\r\n          square.classList.add(\"spot\");\r\n        }\r\n      };\r\n\r\n      playerBoardDiv.addEventListener(\"click\", addShip);\r\n      playerBoardDiv.addEventListener(\"mouseover\", layoutHover);\r\n    }\r\n  };\r\n\r\n  playerAddShips();\r\n};\r\n\r\nconst createRandomBoard = () => {\r\n  const gameBoard = Gameboard();\r\n  const ships = getDefaultShips();\r\n\r\n  ships.forEach((ship) => {\r\n    let response = false;\r\n    gameBoard.addShipInfo(ship);\r\n\r\n    do {\r\n      response = gameBoard.placeShipAt(ship, getRandomNewState());\r\n    } while (!response);\r\n  });\r\n\r\n  return gameBoard;\r\n};\r\n\r\nconst createDOMBoard = (gameboard) => {\r\n  const container = document.createElement(\"div\");\r\n  container.classList.add(\"gameboard-container\");\r\n\r\n  gameboard.forEach((row, rowIdx) => {\r\n    row.forEach((column, colIdx) => {\r\n      const square = document.createElement(\"div\");\r\n      square.setAttribute(\"data-x\", rowIdx);\r\n      square.setAttribute(\"data-y\", colIdx);\r\n      square.classList = `square ${column === \"O\" ? \"ship\" : \"water\"}`;\r\n\r\n      container.appendChild(square);\r\n    });\r\n  });\r\n\r\n  return container;\r\n};\r\n\r\nconst playGame = (game) => {\r\n  reset();\r\n  const { player, playerBoard, playerDOMBoard, computer, computerBoard, ComputerDOMBoard } = game;\r\n  let turn = true; // true: player, false: computer\r\n\r\n  playerBoardDiv.classList.add(\"lock-board\");\r\n\r\n  const handleHit = (result, board) => {\r\n    if (result !== \"Hit\" || !board.gameOver()) return false;\r\n\r\n    ComputerDOMBoard.removeEventListener(\"click\", playerMove);\r\n    reset(turn);\r\n    return true;\r\n  };\r\n\r\n  const computerMove = () => {\r\n    const { result, location } = computer.autoAttackBoard(playerBoard);\r\n    markSpotAsHit(playerDOMBoard, location);\r\n\r\n    if (handleHit(result, playerBoard)) return;\r\n    turn = !turn;\r\n  };\r\n\r\n  const playerMove = (e) => {\r\n    const {\r\n      classList: sqrInfo,\r\n      dataset: { x, y },\r\n    } = e.target;\r\n\r\n    if (!sqrInfo.contains(\"hit\") && sqrInfo.contains(\"square\") && turn) {\r\n      const coords = { x: parseInt(x), y: parseInt(y) };\r\n      let { result } = player.attackBoard(coords, computerBoard);\r\n\r\n      markSpotAsHit(ComputerDOMBoard, coords);\r\n\r\n      if (handleHit(result, computerBoard)) return;\r\n      turn = !turn;\r\n      computerMove();\r\n    }\r\n  };\r\n\r\n  computerBoardDiv.addEventListener(\"click\", playerMove);\r\n};\r\n\r\nconst markSpotAsHit = (DOMBoard, coords) => {\r\n  const { x, y } = coords;\r\n  const square = DOMBoard.querySelector(`.square[data-x=\"${x}\"][data-y=\"${y}\"]`);\r\n  square.classList.add(\"hit\");\r\n};\r\n\r\nconst reset = (winnerBool = null) => {\r\n  console.log(\"resetting game\");\r\n\r\n  if (winnerBool === true || winnerBool === false) {\r\n    winnerLine.textContent =\r\n      winnerBool === false ? \"Computer Wins\" : winnerBool === true ? \"Player Wins\" : \"\";\r\n    const newGameBtn = document.getElementById(\"new-game\");\r\n    computerBoardDiv.classList.add(\"lock-board\");\r\n\r\n    displayResetModal(\"on\");\r\n\r\n    newGameBtn.addEventListener(\"click\", initializeGame);\r\n  } else {\r\n    computerBoardDiv.classList.remove(\"lock-board\");\r\n    displayResetModal(\"off\");\r\n  }\r\n};\r\n\r\nconst displayResetModal = (setting) => {\r\n  if (setting === \"on\") modal.classList.add(\"show\");\r\n  else if (setting === \"off\") modal.classList.remove(\"show\");\r\n};\r\n\r\nexport { initializeGame };\r\n","import { initializeGame } from \"./components/factories/game\";\r\nimport \"../styles/main.css\";\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  console.log(\"Looks like we are in development mode!\");\r\n}\r\n\r\ninitializeGame();\r\n"],"names":["shipLength","shipName","name","length","positions","Array","fill","hit","position","Error","hits","isSunk","every","copyArray","arr","JSON","parse","stringify","getDefaultShips","ship","vertical","location","isValidState","state","has","Object","prototype","hasOwnProperty","call","coords","x","y","isValidCoord","getRandomCoords","Math","floor","random","attackBoard","enemyBoard","result","recieveAttack","autoAttackBoard","board","ships","currBoardState","removeShipOnBoard","shipInfo","boardCopy","newBoardState","newShipObjState","i","placeShipAt","newState","isValidPosition","coordinates","hitShip","find","startX","startY","gameOver","addShipInfo","push","playerBoardDiv","document","getElementById","computerBoardDiv","instructionDiv","rotateBtn","winnerLine","modal","initializeGame","textContent","classList","remove","Computer","ComputerGameBoard","createRandomBoard","ComputerDOMBoard","createDOMBoard","add","appendChild","Player1","PlayerGameBoard","PlayerDOMBoard","createPlayerBoard","player","playerBoard","playerDOMBoard","computer","computerBoard","game","playerBoardSquares","querySelectorAll","isVertical","rotateShip","forEach","addEventListener","playerAddShips","removeEventListener","console","log","playGame","addShip","e","sqrInfo","dataset","target","contains","parseInt","querySelector","shift","layoutHover","square","gameBoard","response","gameboard","container","createElement","row","rowIdx","column","colIdx","setAttribute","turn","handleHit","playerMove","markSpotAsHit","computerMove","DOMBoard","winnerBool","newGameBtn","displayResetModal","setting"],"sourceRoot":""}